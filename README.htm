<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title></title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:truxoft@valhalla.truxoft.com" />
</head>

<body style="background-color: white">



<ul id="index">
  <li><a href="#NAME">NAME</a></li>
  <li><a href="#SYNOPSIS">SYNOPSIS</a></li>
  <li><a href="#DESCRIPTION">DESCRIPTION</a></li>
  <li><a href="#TEMPLATE-TAGS">TEMPLATE TAGS</a></li>
  <li><a href="#USER-PREFERENCES">USER PREFERENCES</a>
    <ul>
      <li><a href="#REPUTATION-WEIGHTS">REPUTATION WEIGHTS</a></li>
    </ul>
  </li>
  <li><a href="#ADMINISTRATOR-SETTINGS">ADMINISTRATOR SETTINGS</a></li>
  <li><a href="#BLACKLISTING-WHITELISTING">BLACKLISTING / WHITELISTING</a></li>
  <li><a href="#REPUTATION-LOGICS">REPUTATION LOGICS</a></li>
  <li><a href="#LEARNING-SPAM-HAM">LEARNING SPAM / HAM</a></li>
  <li><a href="#OPTIMIZING-TXREP">OPTIMIZING TXREP</a></li>
  <li><a href="#AUTHORS">AUTHORS</a></li>
</ul>

<h1 id="NAME">NAME</h1>

<p>Mail::SpamAssassin::Plugin::TxRep - Normalize scores with sender reputation records</p>

<h1 id="SYNOPSIS">SYNOPSIS</h1>

<p>The TxRep (Reputation) plugin is designed as an improved replacement of the AWL (Auto-Whitelist) plugin. It adjusts the final message spam score by looking up and taking in consideration the reputation of the sender.</p>

<p>To try TxRep out, you <b>have to</b> disable the AWL plugin (if present), back up its database and add a line loading this module in init.pre (AWL may be enabled in v310.pre):</p>

<pre><code> # loadplugin   Mail::SpamAssassin::Plugin::AWL
   loadplugin   Mail::SpamAssassin::Plugin::TxRep</code></pre>

<p>When AWL is not disabled, TxRep will refuse to run.</p>

<p>Use the supplied 60_txreputation.cf file or add these lines to a .cf file:</p>

<pre><code> header         TXREP   eval:check_senders_reputation()
 describe       TXREP   Score normalizing based on sender&#39;s reputation
 tflags         TXREP   userconf noautolearn
 priority       TXREP   1000</code></pre>

<h1 id="DESCRIPTION">DESCRIPTION</h1>

<p>This plugin is intended to replace the former AWL - AutoWhiteList. Although the concept and the scope differ, the purpose remains the same - the normalizing of spam score results based on previous sender&#39;s history. The name was intentionally changed from &quot;whitelist&quot; to &quot;reputation&quot; to avoid any confusion, since the result score can be adjusted in both directions.</p>

<p>The TxRep plugin keeps track of the average SpamAssassin score for senders. Senders are tracked using multiple identificators, or their combinations: the From: email address, the originating IP and/or an originating block of IPs, sender&#39;s domain name, the DKIM signature, and the HELO name. TxRep then uses the average score to reduce the variability in scoring from message to message, and modifies the final score by pushing the result towards the historical average. This improves the accuracy of filtering for most email.</p>

<p>In comparison with the original AWL plugin, several conceptual changes were implemented in TxRep:</p>

<p>1. <b>Scoring</b> - at AWL, although it tracks the number of messages received from each respective sender, when calculating the corrective score at a new message, it does not take it in count in any way. So for example a sender who previously sent a single ham message with the score of -5, and then sends a second one with the score of +10, AWL will issue a corrective score bringing the score towards the -5. With the default <code>auto_whitelist_factor</code> of 0.5, the resulting score would be only 2.5. And it would be exactly the same even if the sender previously sent 1,000 messages with the average of -5. TxRep tries to take the maximal advantage of the collected data, and adjusts the final score not only with the mean reputation score stored in the database, but also respecting the number of messages already seen from the sender. You can see the exact formula in the section <a href="#txrep_factor">&quot;<code>txrep_factor</code>&quot;</a>.</p>

<p>2. <b>Learning</b> - AWL ignores any spam/ham learning. In fact it acts against it, which often leads to a frustrating situation, where a user repeatedly tags all messages of a given sender as spam (resp. ham), but at any new message from the sender, AWL will adjust the score of the message back to the historical average which does <b>not</b> include the learned scores. This is now changed at TxRep, and every spam/ham learning will be recorded in the reputation database, and hence taken in consideration at future email from the respective sender. See the section <a href="#LEARNING-SPAM-HAM">&quot;LEARNING SPAM / HAM&quot;</a> for more details.</p>

<p>3. <b>Auto-Learning</b> - in certain situations SpamAssassin may declare a message an obvious spam resp. ham, and launch the auto-learning process, so that the message can be re-evaluated. AWL, by design, did not perform any auto-learning adjustments. This plugin will readjust the stored reputation by the value defined by <a href="#txrep_learn_penalty">&quot;<code>txrep_learn_penalty</code>&quot;</a> resp. <a href="#txrep_learn_bonus">&quot;<code>txrep_learn_bonus</code>&quot;</a>. Auto-learning score thresholds may be tuned, or the auto-learning completely disabled, through the setting <a href="#txrep_autolearn">&quot;<code>txrep_autolearn</code>&quot;</a>.</p>

<p>4. <b>Relearning</b> - messages that were wrongly learned or auto-learned, can be relearned. Old reputations are removed from the database, and new ones added instead of them. The relearning works better when message tracking is enabled through the <a href="#txrep_track_messages">&quot;<code>txrep_track_messages</code>&quot;</a> option. Without it, the relearned score is simply added to the reputation, without removing the old ones.</p>

<p>5. <b>Aging</b> - with AWL, any historical record of given sender has the same weight. It means that changes in senders behavior, or modified SA rules may take long time, or be virtually negated by the AWL normalization, especially at senders with high count of past messages, and low recent frequency. It also turns to be particularly counterproductive when the administrator detects new patterns in certain messages, and applies new rules to better tag such messages as spam or ham. AWL will practically eliminate the effect of the new rules, by adjusting the score back towards the (wrong) historical average. Only setting the <code>auto_whitelist_factor</code> lower would help, but in the same time it would also reduce the overall impact of AWL, and put doubts on its purpose. TxRep, besides the <a href="#txrep_factor">&quot;<code>txrep_factor</code>&quot;</a> (replacement of the <code>auto_whitelist_factor</code>), introduces also the <a href="#txrep_dilution_factor">&quot;<code>txrep_dilution_factor</code>&quot;</a> to help coping with this issue by progressively reducing the impact of past records. More details can be found in the description of the factor below.</p>

<p>6. <b>Blacklisting and Whitelisting</b> - when a whitelisting or blacklisting was requested through SpamAssassin&#39;s API, AWL adjusts the historical total score by a fixed value, regardless of the number of messages recorded at given sender. It results in practical impossibility of blacklisting or whitelisting any sender with higher number of recorded scores. Even at senders with few messages, the impact of the whitelisting or blacklisting is minimal, and new messages can be still tagged incorrectly. TxRep handles black/whitelisting differently, so that it has the desired effect. It is explained in details in the section <a href="#BLACKLISTING-WHITELISTING">&quot;BLACKLISTING / WHITELISTING&quot;</a>.</p>

<p>7. <b>Sender Identification</b> - AWL identifies a sender on the basis of the email address used, and the originating IP address (better told its part defined by the mask setting). The main purpose of this measure is to avoid assigning false good scores to spammers who spoof known email addresses. The disadvantage appears at senders who send from frequently changing locations or even when connecting through dynamical IP addresses that are not within the block defined by the mask setting. Their score is difficult or sometimes impossible to track. Another disadvantage is, for example, at a spammer persistently sending spam from the same IP address, just under different email addresses. AWL will not find his previous scores, unless he reuses the same email address again. TxRep uses several identificators, and creates separate database entries for each of them. It tracks not only the email/IP address combination like AWL, but also the standalone email address (regardless of the originating IP), the standalone IP (regardless of email address used), the domain name of the email address, the DKIM signature, and the HELO name of the connecting PC. The influence of each individual identificator may be tuned up with the help of weight factors described in the section <a href="#REPUTATION-WEIGHTS">&quot;REPUTATION WEIGHTS&quot;</a>.</p>

<p>8. <b>Message Tracking</b> - TxRep (optionally) keeps track of already scanned and/or learned message ID&#39;s. This is useful for avoiding to strengthen the reputation score by simply rescanning or relearning the same message multiple times. In the same time it also allows the proper relearning of once wrongly learned messages, or relearning them after the learn penalty or bonus were changed. See the option <a href="#txrep_track_messages">&quot;<code>txrep_track_messages</code>&quot;</a>.</p>

<p>9. <b>User and Global Storages</b> - usually it is recommended to use the per-user setup of SpamAssassin, because each user may have quite different requirements, and may receive quite different sort of email. Especially when using the Bayesian and AWL plugins, the efficiency is much better when SpamAssassin is learned spam and ham separately for each user. However, the disadvantage is that senders and emails already learned many times by different users, will need to be relearned without any recognized history, anytime they arrive to another user. TxRep uses the advantages of both systems. It can use dual storages: the global common storage, where all email processed by SpamAssassin is recorded, and a local storage separate for each user, with reputation data from his email only. See more details at the setting <a href="#txrep_user2global_ratio">&quot;<code>txrep_user2global_ratio</code>&quot;</a>.</p>

<p>10. <b>Outbound Whitelisting</b> - when a local user sends messages to an email address, we assume that he needs to see the eventual answer too, hence the recipient&#39;s address should be whitelisted. When SpamAssassin is used for scanning outgoing email too, when local users use the SMTP server where SA is installed, for sending email, and when internal networks are defined, TxREP will improve the reputation of all &#39;To:&#39; and &#39;CC&#39; addresses from messages originating in the internal networks. Details can be found at the setting <a href="#txrep_whitelist_out">&quot;<code>txrep_whitelist_out</code>&quot;</a>.</p>

<p>Both plugins (AWL and TxREP) cannot coexist. It is necessary to disable the AWL to allow TxRep running. TxRep reuses the database handling of the original AWL module, and some its parameters bound to the database handler modules. By default, TxRep creates its own database, but the original auto-whitelist can be reused as a starting point. The AWL database can be renamed to the name defined in TxRep settings, and TxRep will start using it. The original auto-whitelist database has to be backed up, to allow switching back to the original state.</p>

<p>The spamassassin/Plugin/TxRep.pm file replaces both spamassassin/Plugin/AWL.pm and spamassassin/AutoWhitelist.pm. Another two AWL files, spamassassin/DBBasedAddrList.pm and spamassassin/SQLBasedAddrList.pm are still needed.</p>

<h1 id="TEMPLATE-TAGS">TEMPLATE TAGS</h1>

<p>This plugin module adds the following <code>tags</code> that can be used as placeholders in certain options. See <a>Mail::SpamAssassin::Conf</a> for more information on TEMPLATE TAGS.</p>

<pre><code> _TXREP_XXX_Y_          TXREP modifier
 _TXREP_XXX_Y_MEAN_     Mean score on which TXREP modification is based
 _TXREP_XXX_Y_COUNT_    Number of messages on which TXREP modification is based
 _TXREP_XXX_Y_PRESCORE_ Score before TXREP
 _TXREP_XXX_Y_UNKNOW_   New sender (not found in the TXREP list)</code></pre>

<p>The XXX part of the tag takes the form of one of the following IDs, depending on the reputation checked: EMAIL, EMAIL_IP, IP, DOMAIN, or HELO. The _Y appendix ID is used only in the case of dual storage, and takes the form of either _U (for user storage reputations), or _G (for global storage reputations).</p>

<h1 id="USER-PREFERENCES">USER PREFERENCES</h1>

<p>The following options can be used in both site-wide (<code>local.cf</code>) and user-specific (<code>user_prefs</code>) configuration files to customize how SpamAssassin handles incoming email messages.</p>

<dl>

<dt id="use_txrep"><b>use_txrep</b></dt>
<dd>

<pre><code>  0 | 1                 (default: 0)</code></pre>

<p>Whether to use TxRep reputation system. TxRep tracks the long-term average score for each sender and then shifts the score of new messages toward that long-term average. This can increase or decrease the score for messages, depending on the long-term behavior of the particular correspondent.</p>

<p>Note that certain tests are ignored when determining the final message score:</p>

<pre><code> - rules with tflags set to &#39;noautolearn&#39;</code></pre>

</dd>
<dt id="txrep_factor"><b>txrep_factor</b></dt>
<dd>

<pre><code> range [0..1]           (default: 0.5)</code></pre>

<p>How much towards the long-term mean for the sender to regress a message. Basically, the algorithm is to track the long-term total score and the count of messages for the sender (<code>total</code> and <code>count</code>), and then once we have otherwise fully calculated the score for this message (<code>score</code>), we calculate the final score for the message as:</p>

<pre><code> finalscore = score + factor * (total + score)/(count + 1)</code></pre>

<p>So if <code>factor</code> = 0.5, then we&#39;ll move to half way between the calculated score and the new mean value. If <code>factor</code> = 0.3, then we&#39;ll move about 1/3 of the way from the score toward the mean. <code>factor</code> = 1 means use the long-term mean including also the new unadjusted score; <code>factor</code> = 0 mean just use the calculated score, disabling so the score averaging, though still recording the reputation to the database.</p>

</dd>
<dt id="txrep_dilution_factor"><b>txrep_dilution_factor</b></dt>
<dd>

<pre><code> range [0.7..1.0]               (default: 0.98)</code></pre>

<p>At any new email from given sender, the historical reputation records are &quot;diluted&quot;, or &quot;watered down&quot; by certain fraction given by this factor. It means that the influence of old records will progressively diminish with every new message from given sender. This is important to allow a more flexible handling of changes in sender&#39;s behavior, or new improvements or changes of local SA rules.</p>

<p>Without any dilution expiry (dilution factor set to 1), the new message score is simply add to the total score of given sender in the reputation database. When dilution is used (factor &lt; 1), the impact of the historical reputation average is reduced by the factor before calculating the new average, which in turn is then used to adjust the new total score to be stored in the database.</p>

<pre><code> newtotal = (oldcount + 1) * (newscore + dilution * oldtotal) / (dilution * oldcount + 1)</code></pre>

<p>In other words, it means that the older a message is, the less and less impact on the new average its original spam score has. For example if we set the factor to 0.9 (meaning dilution by 10%), the score of the new message will be recorded to its 100%, the last score of the same sender to 90%, the second last to 81% (0.9 * 0.9 = 0.81), and for example the 10th last message just to 35%.</p>

<p>At stable systems, we recommend keeping the factor close to 1 (but still lower than 1). At systems where SA rules tuning and spam learning is still in progress, lower factors will help the reputation to quicker adapt any modifications. In the same time, it will also reduce the impact of the historical reputation though.</p>

</dd>
<dt id="txrep_learn_penalty"><b>txrep_learn_penalty</b></dt>
<dd>

<pre><code> range [0..200]         (default: 20)</code></pre>

<p>When SpamAssassin is trained a SPAM message, the given penalty score will be added to the total reputation score of the sender, regardless of the real spam score. The impact of the penalty will be the smaller the higher is the number of messages that the sender already has in the TxRep database.</p>

</dd>
<dt id="txrep_learn_bonus"><b>txrep_learn_bonus</b></dt>
<dd>

<pre><code> range [0..200]         (default: 20)</code></pre>

<p>When SpamAssassin is trained a HAM message, the given penalty score will be deduced from the total reputation score of the sender, regardless of the real spam score. The impact of the penalty will be the smaller the higher is the number of messages that the sender already has in the TxRep database.</p>

</dd>
<dt id="txrep_autolearn"><b>txrep_autolearn</b></dt>
<dd>

<pre><code> range [0..5]                   (default: 0)</code></pre>

<p>When SpamAssassin declares a message a clear spam resp. ham during the mesage scan, and launches the auto-learn process, sender reputation scores of given message will be adjusted by the value of the option <a href="#txrep_learn_penalty">&quot;<code>txrep_learn_penalty</code>&quot;</a>, resp. the <a href="#txrep_learn_bonus">&quot;<code>txrep_learn_bonus</code>&quot;</a> in the same way as during the manual learning. Value 0 at this option disables the auto-learn reputation adjustment - only the score calculated before the auto-learn will be stored to the reputation database.</p>

</dd>
<dt id="txrep_track_messages"><b>txrep_track_messages</b></dt>
<dd>

<pre><code>  0 | 1                 (default: 1)</code></pre>

<p>Whether TxRep should keep track of already scanned and/or learned messages. When enabled, an additional record in the reputation database will be created to avoid false score adjustments due to repeated scanning of the same message, and to allow proper relearning of messages that were either previously wrongly learned, or need to be relearned after modifying the learn penalty or bonus.</p>

</dd>
<dt id="txrep_whitelist_out"><b>txrep_whitelist_out</b></dt>
<dd>

<pre><code> range [0..200]         (default: 10)</code></pre>

<p>When the value of this setting is greater than zero, recipients of messages sent from within the internal networks will be whitelisted through improving their total reputation score with the number of points defined by this setting. Since the IP address and other sender identificators are not known when sending the email, only the reputation of the standalone email is being whitelisted. The domain name is intentionally also left unaffected. The outbound whitelisting can only work when SpamAssassin is set up to scan also outgoing email, when local users use the SMTP server for sending email, and when <code>internal_networks</code> are defined in SpamAssassin configuration. The improving of the reputation happens at every message sent from internal networks, so the more messages is being sent to the recipient, the better reputation his email address will have.</p>

</dd>
<dt id="txrep_ipv4_mask_len"><b>txrep_ipv4_mask_len</b></dt>
<dd>

<pre><code> range [0..32]          (default: 16)</code></pre>

<p>The AWL database keeps only the specified number of most-significant bits of an IPv4 address in its fields, so that different individual IP addresses within a subnet belonging to the same owner are managed under a single database record. As we have no information available on the allocated address ranges of senders, this CIDR mask length is only an approximation. The default is 16 bits, corresponding to a former class B. Increase the number if a finer granularity is desired, e.g. to 24 (class C) or 32. A value 0 is allowed but is not particularly useful, as it would treat the whole internet as a single organization. The number need not be a multiple of 8, any split is allowed.</p>

</dd>
<dt id="txrep_ipv6_mask_len"><b>txrep_ipv6_mask_len</b></dt>
<dd>

<pre><code> range [0..128]         (default: 48)</code></pre>

<p>The AWL database keeps only the specified number of most-significant bits of an IPv6 address in its fields, so that different individual IP addresses within a subnet belonging to the same owner are managed under a single database record. As we have no information available on the allocated address ranges of senders, this CIDR mask length is only an approximation. The default is 48 bits, corresponding to an address range commonly allocated to individual (smaller) organizations. Increase the number for a finer granularity, e.g. to 64 or 96 or 128, or decrease for wider ranges, e.g. 32. A value 0 is allowed but is not particularly useful, as it would treat the whole internet as a single organization. The number need not be a multiple of 4, any split is allowed.</p>

</dd>
<dt id="user_awl_sql_override_username"><b>user_awl_sql_override_username</b></dt>
<dd>

<pre><code>  string                (default: undefined)</code></pre>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>If this option is set the SQLBasedAddrList module will override the set username with the value given. This can be useful for implementing global or group based TxRep databases.</p>

</dd>
<dt id="txrep_user2global_ratio"><b>txrep_user2global_ratio</b></dt>
<dd>

<pre><code> range [0..10]          (default: 0)</code></pre>

<p>When the option txrep_user2global_ratio is set to a value greater than zero, and if the server configuration allows it, two data storages will be used - user and global (server-wide) storages.</p>

<p>User storage keeps only senders who send messages to the respective recipient, and will reflect also the corrected/learned scores, when some messages are marked by the user as spam or ham, or when the sender is whitelisted or blacklisted through the API of SpamAssassin.</p>

<p>Global storage keeps the reputation data of all messages processed by SpamAssassin with their spam scores and spam/ham learning data from all users on the server. Hence, the module will return a reputation value even at senders not known to the current recipient, as long as he already sent email to anyone else on the server.</p>

<p>The value of the txrep_user2global_ratio parameter controls the impact of each of the two reputations. When equal to 1, both the global and the user score will have the same impact on the result. When set to 2, the reputation taken from the user storage will have twice the impact of the global value. The final value of the TXREP tag will be calculated as follows:</p>

<pre><code> total = ( ratio * user + global ) / ( ratio + 1 )</code></pre>

<p>When no reputation is found in the user storage, and a global reputation is available, the global storage is used fully, without applying the ratio.</p>

<p>When the ratio is set to zero, only the default storage will be used. And it then depends whether you use the global, or the local user storage by default, which in turn is controlled either by the parameter user_awl_sql_override_username (in case of SQL storage), or the <code>/auto_whitelist_path</code> parameter (in case of Berkeley database).</p>

<p>When this dual storage is enabled, and no global storage is defined by the above mentioned parameters for the Berkeley or SQL databases, TxRep will attempt to use a generic storage - user &#39;GLOBAL&#39; in case of SQL, and in the case of Berkeley database it uses the path defined by &#39;__local_state_dir__/tx-reputation&#39;, which typically renders into /var/db/spamassassin/tx-reputation. When the default storages are not available, or are not writable, you would have to set the global storage with the help of the <code>user_awl_sql_override_username</code> resp. <code>auto_whitelist_path settings</code>.</p>

<p>Please note that some SpamAssassin installations run always under the same user ID. In such case it is pointless enabling the dual storage, because it would maximally lead to two identical global storages in different locations.</p>

<p>This feature is disabled by default.</p>

</dd>
<dt id="auto_whitelist_distinguish_signed"><b>auto_whitelist_distinguish_signed</b></dt>
<dd>

<pre><code> (default: 1 - enabled)</code></pre>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>If this option is set the SQLBasedAddrList module will keep separate database entries for DKIM-validated e-mail addresses and for non-validated ones. A pre-requisite when setting this option is that a field awl.signedby exists in a SQL table, otherwise SQL operations will fail (which is why we need this option at all - for compatibility with pre-3.3.0 database schema). A plugin DKIM should also be enabled, as otherwise there is no benefit from turning on this option.</p>

</dd>
</dl>

<h2 id="REPUTATION-WEIGHTS">REPUTATION WEIGHTS</h2>

<p>The overall reputation of the sender comprises several elements:</p>

<dl>

<dt id="The-reputation-of-the-From-email-address-bound-to-the-originating-IP-address-fraction-see-the-mask-parameters-for-details-">1) The reputation of the &#39;From&#39; email address bound to the originating IP address fraction (see the mask parameters for details)</dt>
<dd>

</dd>
<dt id="The-reputation-of-the-From-email-address-alone-regardless-the-IP-address-being-currently-used-">2) The reputation of the &#39;From&#39; email address alone (regardless the IP address being currently used)</dt>
<dd>

</dd>
<dt id="The-reputation-of-the-domain-name-of-the-From-email-address">3) The reputation of the domain name of the &#39;From&#39; email address</dt>
<dd>

</dd>
<dt id="The-reputation-of-the-originating-IP-address-regardless-of-senders-email-address">4) The reputation of the originating IP address, regardless of sender&#39;s email address</dt>
<dd>

</dd>
<dt id="The-reputation-of-the-HELO-name-of-the-originating-computer-if-available-">5) The reputation of the HELO name of the originating computer (if available)</dt>
<dd>

</dd>
</dl>

<p>Each of these partial reputations is weighted with the help of these parameters, and the overall reputation is calculation as the sum of the individual reputations divided by the sum of all their weights:</p>

<pre><code> sender_reputation = weight_email    * rep_email    +
                     weight_email_ip * rep_email_ip +
                     weight_domain   * rep_domain   +
                     weight_ip       * rep_ip       +
                     weight_helo     * rep_helo</code></pre>

<p>You can disable the individual partial reputations by setting their respective weight to zero. This will also reduce the size of the database, since each partial reputation requires a separate entry in the database table. Disabling some of the partial reputations in this way may also help with the performance on busy servers, because the respective database lookups and processing will be skipped too.</p>

<dl>

<dt id="txrep_weight_email"><b>txrep_weight_email</b></dt>
<dd>

<pre><code> range [0..10]          (default: 3)</code></pre>

<p>This weight factor controls the influence of the reputation of the standalone email address, regardless of the originating IP address. When adjusting the weight, you need to keep on mind that an email address can be easily spoofed, and hence spammers can use &#39;from&#39; email addresses belonging to senders with good reputation. From this point of view, the email address bound to the originating IP address is a more reliable indicator for the overall reputation.</p>

<p>On the other hand, some reputable senders may be sending from a bigger number of IP addresses, so looking for the reputation of the standalone email address without regarding the originating IP has some sense too.</p>

<p>We recommend using a relatively low value for this partial reputation.</p>

</dd>
<dt id="txrep_weight_email_ip"><b>txrep_weight_email_ip</b></dt>
<dd>

<pre><code> range [0..10]          (default: 10)</code></pre>

<p>This is the standard reputation used in the same way as it was by the original AWL plugin. Each sender&#39;s email address is bound to the originating IP, or its part as defined by the txrep_ipv4_mask_len or txrep_ipv6_mask_len parameters.</p>

<p>At a user sending from multiple locations, diverse mail servers, or from a dynamic IP range out of the masked block, his email address will have a separate reputation value for each of the different (partial) IP addresses.</p>

<p>When the option auto_whitelist_distinguish_signed is enabled, in contrary to the original AWL module, TxRep does not record the IP address when DKIM signature is detected. The email address is then not bound to any IP address, but rather just to the DKIM signature, since it is considered that it authenticates the sender more reliably than the IP address (which can also vary).</p>

<p>This is by design the most relevant reputation, and its weight should be kept high.</p>

</dd>
<dt id="txrep_weight_domain"><b>txrep_weight_domain</b></dt>
<dd>

<pre><code> range [0..10]          (default: 2)</code></pre>

<p>Some spammers may use always their real domain name in the email address, just with multiple or changing local parts. This reputation will record the spam scores of all messages send from the respective domain, regardless of the local part (user name) used.</p>

<p>Similarly as with the email_ip reputation, the domain reputation is also bound to the originating address (or a masked block, if mask parameters used). It avoids giving false reputation based on spoofed email addresses.</p>

<p>In case of a DKIM signature detected, the signature signer is used instead of the domain name extracted from the email address. It is considered that the signing authority is responsible for sending email of any domain name, hence the same reputation applies here.</p>

<p>The domain reputation will give relevant picture about the owner of the domain in case of small servers, or corporation with strict policies, but will be less relevant for freemailers like Gmail, Hotmail, and similar, because both ham and spam may be sent by their users.</p>

<p>The default value is set relatively low. Higher weight values may be useful, but we recommend caution and observing the scores before increasing it.</p>

</dd>
<dt id="txrep_weight_ip"><b>txrep_weight_ip</b></dt>
<dd>

<pre><code> range [0..10]          (default: 4)</code></pre>

<p>Spammers can send through the same relay (incl. compromised hosts) under a multitude of email addresses. This is the exact case when the IP reputation can help. This reputation is a kind of a local RBL.</p>

<p>The weight is set by default lower than for the email_IP reputation, because there may be cases when the same IP address hosts both spammers and acceptable senders (for example the marketing department of a company sends you spam, but you still need to get messages from their billing address).</p>

</dd>
<dt id="txrep_weight_helo"><b>txrep_weight_helo</b></dt>
<dd>

<pre><code> range [0..10]          (default: 0.5)</code></pre>

<p>Big number of spam messages come from compromised hosts, often personal computers, or top-boxes. Their NetBIOS names are usually used as the HELO name when connecting to your mail server. Some of the names are pretty generic and hence may be shared by a big number of hosts, but often the names are quite unique and may be a good indicator for detecting a spammer, despite that he uses different email and IP addresses (spam can come also from portable devices).</p>

<p>No IP address is bound to the HELO name when stored to the reputation database. This is intentional, and despite the possibility that numerous devices may share some of the HELO names.</p>

<p>This option is still considered experimental, hence the low weight value, but after some testing it could be likely at least slightly increased.</p>

</dd>
</dl>

<h1 id="ADMINISTRATOR-SETTINGS">ADMINISTRATOR SETTINGS</h1>

<p>These settings differ from the ones above, in that they are considered &#39;more privileged&#39; -- even more than the ones in the <b>PRIVILEGED SETTINGS</b> section. No matter what <code>allow_user_rules</code> is set to, these can never be set from a user&#39;s <code>user_prefs</code> file.</p>

<dl>

<dt id="txrep_factory-module"><b>txrep_factory module</b></dt>
<dd>

<pre><code> (default: Mail::SpamAssassin::DBBasedAddrList)</code></pre>

<p>Select alternative database factory module for the TxRep database.</p>

</dd>
<dt id="auto_whitelist_path-path-filename"><b>auto_whitelist_path /path/filename</b></dt>
<dd>

<pre><code> (default: ~/.spamassassin/tx-reputation)</code></pre>

<p>This is the TxRep directory and filename. By default, each user has their own reputation database in their <code>~/.spamassassin</code> directory with mode 0700. For system-wide SpamAssassin use, you may want to share this across all users.</p>

</dd>
<dt id="auto_whitelist_db_modules-Module-..."><b>auto_whitelist_db_modules Module ...</b></dt>
<dd>

<pre><code> (default: see below)</code></pre>

<p>What database modules should be used for the TxRep storage database file. The first named module that can be loaded from the Perl include path will be used. The format is:</p>

<pre><code>  PreferredModuleName SecondBest ThirdBest ...</code></pre>

<p>ie. a space-separated list of Perl module names. The default is:</p>

<pre><code>  DB_File GDBM_File SDBM_File</code></pre>

<p>NDBM_File is not supported (see SpamAssassin bug 4353).</p>

</dd>
<dt id="auto_whitelist_file_mode"><b>auto_whitelist_file_mode</b></dt>
<dd>

<pre><code> (default: 0700)</code></pre>

<p>The file mode bits used for the TxRep directory or file.</p>

<p>Make sure you specify this using the &#39;x&#39; mode bits set, as it may also be used to create directories. However, if a file is created, the resulting file will not have any execute bits set (the umask is set to 0111).</p>

</dd>
<dt id="user_awl_dsn-DBI:databasetype:databasename:hostname:port"><b>user_awl_dsn DBI:databasetype:databasename:hostname:port</b></dt>
<dd>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>This will set the DSN used to connect. Example: <code>DBI:mysql:spamassassin:localhost</code></p>

</dd>
<dt id="user_awl_sql_username-username"><b>user_awl_sql_username username</b></dt>
<dd>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>The authorized username to connect to the above DSN.</p>

</dd>
<dt id="user_awl_sql_password-password"><b>user_awl_sql_password password</b></dt>
<dd>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>The password for the database username, for the above DSN.</p>

</dd>
<dt id="user_awl_sql_table-tablename"><b>user_awl_sql_table tablename</b></dt>
<dd>

<pre><code> (default: txrep)</code></pre>

<p>Used by the SQLBasedAddrList storage implementation.</p>

<p>The table name where reputation is to be stored in, for the above DSN.</p>

</dd>
</dl>

<h1 id="BLACKLISTING-WHITELISTING">BLACKLISTING / WHITELISTING</h1>

<p>When asked by SpamAssassin to blacklist or whitelist a user, the TxRep plugin adds a score of 100 (for blacklisting) or -100 (for whitelisting) to the given sender for every email recorded in the reputation database. It means, if there are 1000 emails from a given sender, his total reputation score will increase/decrease by 100,000 points, and the average reputation score is pushed close to 100 (blacklisted) or -100 (whitelisted) points (+/- the original average). <code>reputation</code> is the average recorded score, which is equal to the <code>total</code> / <code>count</code>.</p>

<pre><code>   reputation = total / count
   total = reputation * count</code></pre>

<p>The following two formulas are equivalent:</p>

<pre><code>   blacklisted_total = old_total + 100 * count
   blacklisted_reputation = old_reputation + 100</code></pre>

<p>Blacklisting and whitelisting have the influence only on the reputation of the standalone email address. It does not affect the reputation scores of the domain name, HELO name, DKIM signature or the originating IP address. In case of dual storage, the black/whitelisting is performed only in the default storage.</p>

<h1 id="REPUTATION-LOGICS">REPUTATION LOGICS</h1>

<p>1. The most significant sender identificator is equally as at AWL, the combination of the email address and the originating IP address, resp. its part defined by the IPv4 resp. IPv6 mask setting.</p>

<p>2. No IP checking for standalone EMAIL address reputation</p>

<p>3. No signature checking for IP reputation, and for HELO name reputation</p>

<p>4. The EMAIL_IP weight, and not the standalone EMAIL weight is used when no IP address is available (EMAIL_IP is the main indicator, and has the highest weight)</p>

<p>5. No IP checking at signed emails (signature authenticates the email instead of the IP address)</p>

<p>6. No signature used for standalone EMAIL reputation (would be redundant, since no IP is used at signed EMAIL_IP reputation, and we would store two identical hits)</p>

<p>7. When available, the DKIM signer is used instead of the domain name for the DOMAIN reputation</p>

<p>8. No IP and no signature used for HELO reputation (despite the possibility of the possible existence of multiple computers with the same HELO)</p>

<p>9. The full (unmasked IP) address is used (in the address field, instead the IP field) for the standalone IP reputation</p>

<h1 id="LEARNING-SPAM-HAM">LEARNING SPAM / HAM</h1>

<p>When SpamAssassin is told to learn (or relearn) a given message as spam or ham, all reputations relevant to the message (email, email_ip, domain, ip, helo) in both global and user storages will be updated using the <code>txrep_learn_penalty</code> respectively the <code>rxrep_learn_bonus</code> values. The new reputation of given sender property (email, domain,...) will be the respective result of one of the following formulas:</p>

<pre><code>   new_reputation = old_reputation + learn_penalty
   new_reputation = old_reputation - learn_bonus</code></pre>

<p>The TxRep plugin currently does track each message individually, hence it does not detect when you learn the message repeatedly. It will add/subtract the penalty/bonus score each time the message is fed to the spam learner.</p>

<h1 id="OPTIMIZING-TXREP">OPTIMIZING TXREP</h1>

<p>TxRep can be optimized for speed and simplicity, or for the precision in assigning the reputation scores.</p>

<p>First of all TxRep can be quickly disabled and re-enabled through the option <a href="#use_txrep">&quot;<code>use_txrep</code>&quot;</a>. It can be done globally, or individually in each respective <code>user_prefs</code>. Disabling TxRep will not destroy the database, so it can be re-enabled any time later again.</p>

<p>On many systems, SQL-based storage may perform faster than the default Berkeley DB storage, so you should consider setting it up. See the section <a href="#SQL-BASED-STORAGE">&quot;SQL-BASED STORAGE&quot;</a> for instructions.</p>

<p>Then there are multiple settings that can reduce the number of records stored in the database, hence reducing the size of the storage, and also the processing time:</p>

<p>1. Setting <a href="#txrep_user2global_ratio">&quot;<code>txrep_user2global_ratio</code>&quot;</a> to zero will disable the dual storage, halving so the disk space requirements, and the processing times of this plugin.</p>

<p>2. You can disable all but one of the <a href="#REPUTATION-WEIGHTS">&quot;REPUTATION WEIGHTS&quot;</a>. The EMAIL_IP is the most specific option, so it is the most likely choice in such case, but you could base the reputation system on any of the remaining scores. Each of the enabled reputations adds a new entry to the database for each new identificator. So while for example the number of recorded and scored domains may be big, the number of stored IP addresses will be probably higher, and would require more space in the storage.</p>

<p>3. Disabling the <a href="#txrep_track_messages">&quot;<code>txrep_track_messages</code>&quot;</a> avoids storing a separate entry for every scanned message, hence also reducing the disk space requirements, and the processing time.</p>

<p>4. Disabling the option <a href="#txrep_autolearn">&quot;<code>txrep_autolearn</code>&quot;</a> will save the processing time at messages that trigger the auto-learning process.</p>

<p>5. Disabling <a href="#txrep_whitelist_out">&quot;<code>txrep_whitelist_out</code>&quot;</a> will reduce the processing time at outbound connections.</p>

<p>6. Keeping the option <a href="#auto_whitelist_distinguish_signed">&quot;<code>auto_whitelist_distinguish_signed</code>&quot;</a> enabled may help slightly reducing the size of the database, because at signed messages, the originating IP address is ignored, hence no additional database entries are needed for each separate IP address (resp. a masked block of IP addresses).</p>

<p>Since TxRep reuses the storage architecture of the former AWL plugin, for initializing the SQL storage, the same instructions apply also to TxRep. Although the old AWL table can be reused for TxRep, by default TxRep expects the SQL table to be named &quot;txrep&quot;.</p>

<p>To install a new SQL table for TxRep, save the &#39;CREATE&#39; SQL command shown below into a file named txrep_mysql.sql, and use the following command. You can also simply run the SQL command from within the respective database area in PhpMyAdmin:</p>

<pre><code> mysql -h &lt;hostname&gt; -u &lt;adminusername&gt; -p &lt;databasename&gt; &lt; txrep_mysql.sql
 Enter password: &lt;adminpassword&gt;

 CREATE TABLE txrep (
   username varchar(100) NOT NULL default &#39;&#39;,
   email varchar(255) NOT NULL default &#39;&#39;,
   ip varchar(40) NOT NULL default &#39;&#39;,
   count int(11) NOT NULL default &#39;0&#39;,
   totscore float NOT NULL default &#39;0&#39;,
   signedby varchar(255) NOT NULL default &#39;&#39;,
   PRIMARY KEY (username,email,signedby,ip)
 ) ENGINE=MyISAM;</code></pre>

<p>(If you get a syntax error at an older version of MySQL, use TYPE=MyISAM instead of ENGINE=MyISAM at the end of the command)</p>

<p>For PostgreSQL, use the following:</p>

<pre><code> psql -U &lt;username&gt; -f txrep_pg.sql &lt;databasename&gt;</code></pre>

<h1 id="AUTHORS">AUTHORS</h1>

<p>First release on 2014/03/05 by Ivo Truxa &lt;truxa@truxoft.com&gt;</p>

<p>Parts of code of the AWL and Bayes SpamAssassin plugins used as a starting template.</p>

<pre><code> revision       1.0.4
 date           2014/03/06</code></pre>


</body>

</html>


